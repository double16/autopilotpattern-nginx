lua_shared_dict prometheus_metrics 10M;
lua_package_path "/usr/local/lib/lua/?.lua;;";
init_by_lua '
  prometheus = require("prometheus").init("prometheus_metrics")
  metric_requests = prometheus:counter(
    "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
  metric_uri_requests = prometheus:counter(
    "nginx_http_uri_total", "Number of HTTP requests per uri", {"host", "uri", "method", "status"})
  metric_latency = prometheus:histogram(
    "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
  metric_uri_latency = prometheus:histogram(
    "nginx_http_uri_duration_seconds", "HTTP request latency", {"host", "uri", "method"})
  metric_connections = prometheus:gauge(
    "nginx_http_connections", "Number of HTTP connections", {"state"})
';
log_by_lua '
  local host = ngx.var.host:gsub("^www.", "")
  metric_requests:inc(1, {host, ngx.var.status})
  metric_uri_requests:inc(1, {host, ngx.var.uri, ngx.var.request_method, ngx.var.status})
  metric_latency:observe(tonumber(ngx.var.request_time), {host})
  metric_uri_latency:observe(tonumber(ngx.var.request_time), {host, ngx.var.uri, ngx.var.request_method})
';

server {
  listen 9090;
  location /metrics {
    content_by_lua '
      metric_connections:set(ngx.var.connections_reading, {"reading"})
      metric_connections:set(ngx.var.connections_waiting, {"waiting"})
      metric_connections:set(ngx.var.connections_writing, {"writing"})
      prometheus:collect()
    ';
  }
}

